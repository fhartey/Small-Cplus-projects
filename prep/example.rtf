{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red26\green23\blue24;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c13725\c12157\c12549;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs22 \cf2 # Basic get to know your self questions \uc0\u8232 
\f1\b0 \uc0\u8232 1) What would you want to see more into your new role\
\
I would want  to see more\
\
\
2) What do you must like and dislike of your current role\
\
\uc0\u8232 
\f0\b \uc0\u8232 4 principals of OOP\
\uc0\u8232 
\f1\b0 1) what is Encaplsation \uc0\u8232 \u8232 Encaplastion allows us to  take a piece of code that is repetitive and put it into a function. Usually we would want to make the function as reusable as possible so that we are able to call that function in other parts of are program, and allow it to take parameters that give us different results\u8232 \u8232 In turn Encapacltion allows for a cleaner and more reusable code base.\u8232 \u8232 2) WHAT IS INHERITANCE\u8232 \u8232 Inheritance allows us to to inherit or take all of another class functions and properties and use those in a brand new class where we can create new properties in. Basically Inhetrinces allows use to reuse code,  keeping are code base shorter and more ogrinazed.\
\uc0\u8232 // This one needs more work of understanding\
3) what is abstraction\uc0\u8232 Abstraction is where you have a class with functions that are already create and ready to use. \u8232 This was you have abstract class that has set functions that already do what they need to do.\
\uc0\u8232 Polymorphism can be applied in two simple ways\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf3 {\listtext	1.	}Method Overloading\cf2 \
\ls1\ilvl0\cf3 {\listtext	2.	}Method Overriding\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\fs22 \cf2 \uc0\u8232 1) Method Overloading\u8232 \u8232 1.a) \u8232 When a class has multiple methods with the same names but a different set of parameters, it is called Method overloading. You can proceed with method overloading, only if your methods satisfy any one of the following rules  \u8232 Have method with the same name and different parameters, or return types.\u8232 \
// this one needs work and more understanding\uc0\u8232 2) Method Overriding\u8232 1.A)\u8232 The second way to go ahead with polymorphism is method overriding. This is only possible if a subclass ( or ) sister class has the same method as the parent class. Much like Method overloading, there are also some rules for method overriding to work.\
What is the difference between abstract class and interface\uc0\u8232  \
So two different classes have the same method  and one class is used  as interface or is inherited\uc0\u8232 the method will need the same parameters and return types,\u8232 but then inside the function the function can implant different code, and depend on when you create the object and call that function, it will do the implanted code that was done in that septic class.\
\
\
abstact class is where you can have pre named function that are not implented adn have functions that are implmented\
where then a class can intehit and the functions that are not implmented that class can create there own implention of them\
and where the ones that are implented that class will now be able to implemnt them as well\
\
Where as interface all the function are not implented yet, and is used for a class to inhiterit it, and make its own implention of those set functigons\
\
\
\
\
What is a Singleton\
a class where you tend to only have a single instance of that class, or struct\
\
mainly to orgainze a bunch of global varibles and static functions that may pr may not act apon those varibles\
\
no constructor or we will need to instanitate it.\
\
Use unique_ptr when you want a single pointer to an object that will be reclaimed when that single pointer is destroyed. this unqiue pointer can not\
coppy other unique pointers\
\
Use shared_ptr when you want multiple pointers to the same resource. Shared pinters can always equal eachoter hae mutiples the ref counter will go up \
\
\
\
Intermediate experience with modern C++ \
(smart pointers, containers, maps), \
and use of abstract classes with pure virtual methods\
\
\
What is the most proudest project you have worked on?\
The most proudest project that i have worked on was  createing the radar control for my current employer\
\
what was a challenging thing that you had to over come in the project?\
\
The most chllenging part i had to over come was fitting these control in the legacy system, working on very lose base requirments from the cutmoer\
this was challenging because the custimer wasnt sure want they wanted so there were my re itterations of itwhile we tested it to gether and i would have to come up with \
solutions on the fly to give them exactly what they wanted\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\fs24 \cf0 \
\
What would you want to see more into your new role\
\
What do you must like and dislike of your current role\
\
}